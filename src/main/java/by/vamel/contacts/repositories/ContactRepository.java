package by.vamel.contacts.repositories;

import by.vamel.contacts.entities.Address;
import by.vamel.contacts.entities.Contact;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class ContactRepository {
    private final DataSource dataSource;

    public ContactRepository() {
        try {
            Context context = new InitialContext();
            try {
                dataSource = (DataSource) context.lookup("java:comp/env/jdbc/trainingdb");
            } finally {
                context.close();
            }
        } catch (NamingException e) {
            throw new RuntimeException(e);
        }
    }

    public void init() {
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                try {
                    String query = "create table contact (id integer generated by default as identity primary key, name varchar(255), address_id integer, " +
                            "FOREIGN KEY (address_id) REFERENCES address (id))";
                    statement.execute(query);
                } finally {
                    statement.close();
                }
            } finally {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void destroy() {
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                try {
                    String query = "drop table contact";
                    statement.execute(query);
                } finally {
                    statement.close();
                }
            } finally {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void create(Contact contact) {
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                try {
                    String query = "insert into contact (name, address_id) values (" +
                            "'" + contact.getName() + "', " +
                            " '" + contact.getAddressId() + "')";
                    statement.executeUpdate(query, Statement.RETURN_GENERATED_KEYS);
                    ResultSet resultSet = statement.getGeneratedKeys();
                    try {
                        if (resultSet.next()) {
                            contact.setId(resultSet.getLong("id"));
                        }
                    } finally {
                        resultSet.close();
                    }
                } finally {
                    statement.close();
                }
            } finally {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void update(Contact contact) {
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                try {
                    String query = "update contact set " +
                            "name='" + contact.getName() + "', " +
                            "address_id='" + contact.getAddressId() +"' " +
                            "where id = " + contact.getId();
                    statement.executeUpdate(query);
                } finally {
                    statement.close();
                }
            } finally {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void delete(Contact contact) {
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                try {
                    String query = "delete from contact where id = " + contact.getId();
                    statement.executeUpdate(query);
                } finally {
                    statement.close();
                }
            } finally {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public Contact find(long id) {
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                try {
                    ResultSet resultSet = statement.executeQuery("select * from contact where id = " + id);
                    try {
                        if(!resultSet.next()) {
                            return null;
                        } else {
                            return unmarshaller(resultSet);
                        }
                    } finally {
                        resultSet.close();
                    }
                } finally {
                    statement.close();
                }
            } finally {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public List<Contact> findAll() {
        List contacts = new ArrayList();
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                try {
                    ResultSet resultSet = statement.executeQuery("select * from contact");
                    try {
                        while(resultSet.next()) {
                            contacts.add(unmarshaller(resultSet));
                        }
                        return contacts;
                    } finally {
                        resultSet.close();
                    }
                } finally {
                    statement.close();
                }
            } finally {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    private Contact unmarshaller(ResultSet resultSet) {
        Contact contact = new Contact();
        try {
            contact.setId(resultSet.getLong("id"));
            contact.setName(resultSet.getString("name"));
            contact.setAddressId(resultSet.getLong("address_id"));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return contact;
    }
}
