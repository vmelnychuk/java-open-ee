package by.vamel.contacts.repositories;

import by.vamel.contacts.entities.Address;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class AddressRepository {
    private final DataSource dataSource;

    public AddressRepository() {
        try {
            Context context = new InitialContext();
            try {
                dataSource = (DataSource) context.lookup("java:comp/env/jdbc/trainingdb");
            } finally {
                context.close();
            }
        } catch (NamingException e) {
            throw new RuntimeException(e);
        }
    }

    public void init() {
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                try {
                    String query = "create table address (id integer generated by default as identity primary key, street varchar(255), city varchar(255))";
                    statement.execute(query);
                } finally {
                    statement.close();
                }
            } finally {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void create(Address address) {
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                try {
                    String query = "insert into adress (street, city) values (" +
                            "'" + address.getStreet() + "', " +
                            " '" + address.getCity() + "')";
                    statement.execute(query, Statement.RETURN_GENERATED_KEYS);
                    ResultSet resultSet = statement.getGeneratedKeys();
                    try {
                        if (resultSet.next()) {
                            address.setId(resultSet.getLong("id"));
                        }
                    } finally {
                        resultSet.close();
                    }
                } finally {
                    statement.close();
                }
            } finally {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void update(Address address) {
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                try {
                    String query = "update address set " +
                            "street='" + address.getStreet() + "', " +
                            "city='" + address.getCity() +"' " +
                            "where id = " + address.getId();
                    statement.executeUpdate(query);
                } finally {
                    statement.close();
                }
            } finally {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void delete(Address address) {
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                try {
                    String query = "delete from address where id = " + address.getId();
                    statement.executeUpdate(query);
                } finally {
                    statement.close();
                }
            } finally {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public Address find(long id) {
        try {
            Connection connection = dataSource.getConnection();
            try {
                Statement statement = connection.createStatement();
                try {
                    ResultSet resultSet = statement.executeQuery("select * from address where id = " + id);
                    try {
                        if(!resultSet.next()) {
                            return null;
                        } else {
                            return unmarshaller(resultSet);
                        }
                    } finally {
                        resultSet.close();
                    }
                } finally {
                    statement.close();
                }
            } finally {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    private Address unmarshaller(ResultSet resultSet) {
        Address address = new Address();
        try {
            address.setId(resultSet.getLong("id"));
            address.setCity(resultSet.getString("city"));
            address.setStreet(resultSet.getString("street"));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return address;
    }
}
